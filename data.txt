----- index.tsx -----
import type { ParentComponent } from "solid-js";
import { createEffect } from "solid-js";
import { getCompany } from "../../bindings";
import Sidebar from "./components/Sidebar";
import { useSelector } from "@/store";
import { Toaster } from "solid-toast";

const Dashboard: ParentComponent = (props) => {
  const stateService = useSelector((state) => state.stateService);

  const updateCompany = useSelector((state) => state.companyService.updateCompany);

  const fetchCompany = async () => {
    const companyData = await getCompany(stateService.state.companyId || 1);
    if (!companyData) {
      stateService.updateState({ companyId: 1 });
      return;
    }

    updateCompany(companyData);
    stateService.updateState({ companyId: companyData.id });
  };

  createEffect(() => {
    fetchCompany();
  });

  return (
    <>
      <div class="flex flex-row items-start w-screen">
        <Sidebar />
        <Toaster position="bottom-right" gutter={8} />
        {/* px 4 pt-50px */}
        <div class="overflow-y-auto  mx-auto w-full h-screen pt-40px no-scrollbar bg-primary text-primary">
          {props.children}
        </div>
      </div>
    </>
  );
};

export default Dashboard;


----- components/Sidebar/index.tsx -----
import { type Component, For, type JSX, createSignal, onMount } from "solid-js";
import SidebarButton from "./Button";
import SidebarSection from "./Section";
import { useSelector } from "@/store";
import { useI18n } from "@/i18n";
import {
  FiCheck,
  FiClipboard,
  FiClock,
  FiDollarSign,
  FiFileMinus,
  FiFileText,
  FiHome,
  FiPaperclip,
  FiPlus,
  FiSave,
  FiSettings,
  FiUsers,
} from "solid-icons/fi";
import { Hr } from "@/shared/components/Menu/Hr";
import { DisclosureStateChild, Listbox, ListboxButton, ListboxOption, ListboxOptions, Transition } from "terracotta";
import { type Company, getCompanies } from "@/bindings";
import { useNavigate } from "@solidjs/router";
import toast from "solid-toast";

interface SidebarButtonData {
  target: string;
  icon: JSX.Element;
  label: string;
}

interface SidebarSectionData {
  title: string;
  buttons: SidebarButtonData[];
}

const Sidebar: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();
  const company = useSelector((state) => state.companyService.company);
  const stateService = useSelector((state) => state.stateService);

  const [companies, setCompanies] = createSignal<Company[]>([]);
  const [selected, setSelected] = createSignal<Company>(company);

  onMount(async () => {
    const data = await getCompanies(stateService.state.companyId || undefined);
    setCompanies([company, ...data]);
  });

  const setCompany = (company: Company) => {
    stateService.updateState({ companyId: company.id });
    toast.success("Cuspic kamarade");
    navigate("/");
  };

  const sidebarSections: SidebarSectionData[] = [
    {
      title: t("sidebar.section.sales"),
      buttons: [
        { target: "/dashboard/sales/invoices", icon: <FiFileText />, label: t("sidebar.button.invoices") },
        { target: "/dashboard/sales/templates", icon: <FiSave />, label: t("sidebar.button.templates") },
        { target: "/dashboard/sales/schedules", icon: <FiClock />, label: t("sidebar.button.schedules") },
      ],
    },
    {
      title: t("sidebar.section.purchase"),
      buttons: [
        { target: "/dashboard/purchase/expenses", icon: <FiDollarSign />, label: t("sidebar.button.expenses") },
        { target: "/dashboard/purchase/recieved", icon: <FiFileMinus />, label: t("sidebar.button.recievedInvoices") },
      ],
    },
    {
      title: t("sidebar.section.other"),
      buttons: [
        { target: "/dashboard/other/clients", icon: <FiUsers />, label: t("sidebar.button.clients") },
        { target: "/dashboard/other/reports", icon: <FiPaperclip />, label: t("sidebar.button.reports") },
        { target: "/dashboard/other/templates", icon: <FiClipboard />, label: t("sidebar.button.templates") },
      ],
    },
  ];

  return (
    <div class="text-primary relative flex h-screen w-1/5 min-w-[200px] shrink-0 flex-col justify-between border-r border-zinc-400/70 px-2.5 pb-4 pt-14 lg:max-w-[220px] lg:px-4 dark:border-black/90">
      <div>
        <SidebarButton notInSection target="/dashboard/" icon={<FiHome />}>
          {t("sidebar.button.overview")}
        </SidebarButton>
        <For each={sidebarSections}>
          {(section) => (
            <SidebarSection title={section.title}>
              <For each={section.buttons}>
                {(button) => (
                  <SidebarButton target={button.target} icon={button.icon}>
                    {button.label}
                  </SidebarButton>
                )}
              </For>
            </SidebarSection>
          )}
        </For>
      </div>
      <div class="flex flex-col gap-4">
        <SidebarButton target="/dashboard/settings" icon={<FiSettings />} notInSection>
          {t("sidebar.button.settings")}
        </SidebarButton>
        <Hr />
        <Listbox value={selected()} onSelectChange={setSelected} defaultOpen={false}>
          <ListboxButton class="text-sm flex flex-row items-center justify-start gap-2.5 lg:gap-4 hover:bg-neutral-100/40 dark:hover:bg-neutral-100/25 bg-transparent rounded-[5px] px-2 py-[3px] w-full">
            <div class="flex h-8 w-8 items-center justify-center lg:h-10 lg:w-10 rounded-full">
              <img
                src="https://wallpapers-clan.com/wp-content/uploads/2023/05/cool-anime-pfp-2-17.jpg"
                alt="pfp"
                class="rounded-full"
              />
            </div>
            <span class="block truncate">{company.name}</span>
          </ListboxButton>
          <div class="flex flex-col w-full">
            <div class="relative">
              <DisclosureStateChild>
                {({ isOpen }): JSX.Element => (
                  <Transition
                    show={isOpen()}
                    enter="transition ease-out duration-100"
                    enterFrom="transform opacity-0 scale-95"
                    enterTo="transform opacity-100 scale-100"
                    leave="transition ease-in duration-75"
                    leaveFrom="transform opacity-100 scale-100"
                    leaveTo="transform opacity-0 scale-95"
                  >
                    <ListboxOptions
                      unmount={false}
                      class="absolute bottom-full w-full py-1 mb-1 overflow-auto text-base bg-primary rounded-md shadow-menu max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
                    >
                      <For each={companies()}>
                        {(company): JSX.Element => (
                          <ListboxOption
                            class="focus:outline-none group px-1"
                            value={company}
                            onClick={() => setCompany(company)}
                          >
                            {({ isActive, isSelected }): JSX.Element => (
                              <div
                                classList={{
                                  "text-primary bg-material-selection": isActive(),
                                  "text-opaque-1": !isActive(),
                                  "group-hover:text-primary group-hover:bg-material-selection": true,
                                  "cursor-default select-none relative py-2 pl-10 pr-4 rounded": true,
                                }}
                              >
                                <span
                                  classList={{
                                    "font-bold": isSelected(),
                                    "font-normal": !isSelected(),
                                    "block truncate": true,
                                  }}
                                >
                                  {company.name}
                                </span>
                                {isSelected() && (
                                  <span
                                    classList={{
                                      "text-primary": isActive(),
                                      "group-hover:text-primary": true,
                                      "absolute inset-y-0 left-0 flex items-center pl-3": true,
                                    }}
                                  >
                                    <FiCheck aria-hidden="true" />
                                  </span>
                                )}
                              </div>
                            )}
                          </ListboxOption>
                        )}
                      </For>
                      <ListboxOption
                        value={""}
                        class="focus:outline-none group px-1"
                        onClick={() => navigate("/setup")}
                      >
                        {({ isActive }): JSX.Element => (
                          <div
                            classList={{
                              "text-primary bg-material-selection": isActive(),
                              "text-opaque-1": !isActive(),
                              "group-hover:text-primary group-hover:bg-material-selection": true,
                              "cursor-default select-none relative py-2 pl-10 pr-4 rounded": true,
                            }}
                          >
                            <span
                              classList={{
                                "text-primary": isActive(),
                                "group-hover:text-primary": true,
                                "absolute inset-y-0 left-0 flex items-center pl-3": true,
                              }}
                            >
                              <FiPlus />
                            </span>
                            <span class="block truncate">{t("sidebar.button.company.create")}</span>
                          </div>
                        )}
                      </ListboxOption>
                    </ListboxOptions>
                  </Transition>
                )}
              </DisclosureStateChild>
            </div>
          </div>
        </Listbox>
      </div>
    </div>
  );
};

export default Sidebar;


----- components/Sidebar/Section.tsx -----
import type { ParentComponent } from "solid-js";

interface ISidebarSectionProps {
  title: string;
}

const SidebarSection: ParentComponent<ISidebarSectionProps> = (props) => {
  return (
    <>
      <div class="mt-4 text-xs font-medium text-secondary">{props.title}</div>
      <div class="">{props.children}</div>
    </>
  );
};

export default SidebarSection;


----- components/Sidebar/Profile/Button.tsx -----
import type { ParentComponent } from "solid-js";

interface IProfileButtonProps {
  onClick: () => void;
}

const ProfileButton: ParentComponent<IProfileButtonProps> = (props) => {
  return (
    <div
      onClick={props.onClick}
      class="inline-flex justify-center items-center w-9 h-9 rounded-md border-t transition-all transform border-zinc-700/50 bg-zinc-800 active:translate-y-1 hover:bg-zinc-700 text-red"
    >
      {props.children}
    </div>
  );
};

export default ProfileButton;


----- components/Sidebar/Button.tsx -----
import { A } from "@solidjs/router";
import type { JSX, ParentComponent } from "solid-js";

const SidebarButton: ParentComponent<{
  icon?: JSX.Element;
  notInSection?: boolean;
  target: string;
}> = (props) => {
  return (
    <A
      href={props.target}
      end
      class={`mt-1 flex items-center gap-[7px] rounded-[5px] px-2 py-[3px] text-sm transition-all hover:cursor-pointer hover:bg-neutral-100/40 dark:hover:bg-neutral-100/25 ${
        !props.notInSection ? "ml-2" : ""
      }`}
      activeClass="dark:bg-neutral-100/15 bg-neutral-100/25"
    >
      {props.icon}
      {props.children}
    </A>
  );
};

export default SidebarButton;


----- components/Popup/Popup.tsx -----
import type { ParentComponent } from "solid-js";

const Popup: ParentComponent<{}> = (props) => {
  return <div>{props.children}</div>;
};

export default Popup;


----- components/Form/index.tsx -----
import type { FormApi } from "@tanstack/solid-form";
import type { ParentComponent } from "solid-js";

// div beacuse form causes issues with dropdown menu
// biome-ignore lint/suspicious/noExplicitAny: idk what the form type is
const Form: ParentComponent<{ form: FormApi<any, any>; class?: string }> = (props) => {
  return <div class={`flex flex-col gap-8 ${props.class}`}>{props.children}</div>;
};
export default Form;


----- components/Form/Section.tsx -----
import { Show, type ParentComponent } from "solid-js";

const Section: ParentComponent<{ title?: string }> = (props) => {
  return (
    <div>
      <Show when={props.title}>
        <h2 class="text-primary text-sm font-semibold pb-2">{props.title}</h2>
      </Show>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">{props.children}</div>
    </div>
  );
};

export default Section;


----- components/Form/Dropdown.tsx -----
import type { Component, JSX } from "solid-js";
import { For, createEffect, createSignal } from "solid-js";
import { DisclosureStateChild, Listbox, ListboxButton, ListboxOption, ListboxOptions, Transition } from "terracotta";
import { TbSelector } from "solid-icons/tb";
import { FiCheck } from "solid-icons/fi";

interface DropdownItem {
  id: number | string;
  label: string;
}

interface DropdownProps {
  data: DropdownItem[];
  onSelect: (value: DropdownItem) => void;
  label: string;
  defaultValueId?: number | string;
}

const Dropdown: Component<DropdownProps> = (props) => {
  const [selected, setSelected] = createSignal<DropdownItem>(props.data[0]);

  createEffect(() => {
    if (props.defaultValueId) setSelected(props.data.find((item) => item.id === props.defaultValueId) || props.data[0]);
  }, [props.defaultValueId]);

  const handleSelect = (value: DropdownItem | undefined) => {
    if (!value) return;
    setSelected(value);
    props.onSelect(value);
  };

  return (
    <div class="flex flex-col gap-1">
      <span class="text-xs text-secondary">{props.label}</span>
      <Listbox defaultOpen={false} value={selected()} onSelectChange={handleSelect} class="relative">
        <ListboxButton class="relative w-full py-1.5 pl-3 pr-10 text-left bg-element border-default border-1 rounded-lg cursor-default focus:outline-none text-sm">
          <span class="block truncate">{selected().label}</span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <TbSelector class="w-5 h-5 text-primary" aria-hidden="true" />
          </span>
        </ListboxButton>
        <DisclosureStateChild>
          {({ isOpen }): JSX.Element => (
            <Transition
              show={isOpen()}
              enter="transition ease-in duration-100"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="transition ease-out duration-100"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <ListboxOptions
                unmount={false}
                class="absolute w-full py-1 mt-1 overflow-auto text-base bg-element border-default border-1 rounded-md shadow-lg max-h-60 focus:outline-none sm:text-sm"
              >
                <For each={props.data}>
                  {(item): JSX.Element => (
                    <ListboxOption class="focus:outline-none group" value={item}>
                      {({ isActive, isSelected }): JSX.Element => (
                        <div
                          classList={{
                            "bg-default": isActive(),
                            "cursor-default select-none relative py-2 pl-10 pr-4": true,
                          }}
                        >
                          <span
                            classList={{
                              "font-medium": isSelected(),
                              "font-normal": !isSelected(),
                              "block truncate": true,
                            }}
                          >
                            {item.label}
                          </span>
                          {isSelected() ? (
                            <span
                              classList={{
                                "text-primary": true,
                                "absolute inset-y-0 left-0 flex items-center pl-3": true,
                              }}
                            >
                              <FiCheck class="w-5 h-5" />
                            </span>
                          ) : null}
                        </div>
                      )}
                    </ListboxOption>
                  )}
                </For>
              </ListboxOptions>
            </Transition>
          )}
        </DisclosureStateChild>
      </Listbox>
    </div>
  );
};

export default Dropdown;


----- components/Form/Table.tsx -----
import type { Component } from "solid-js";

const Table: Component<{}> = (props) => {
  return <div></div>;
};

export default Table;


----- components/Form/Input.tsx -----
import type { ValidationError } from "@tanstack/solid-form";
import { For, Show, type Component } from "solid-js";

type TextInputProps = {
  type: "text" | "date" | "email" | "tel";
  onChange: (value: string) => void;
  label: string;
  placeholder?: string;
  defaultValue?: string;
  errors?: ValidationError[];
};

type NumberInputProps = {
  type: "number";
  onChange: (value: number) => void;
  label: string;
  placeholder?: string;
  defaultValue?: number;
  errors?: ValidationError[];
};

type InputProps = TextInputProps | NumberInputProps;

const Input: Component<InputProps> = (props) => {
  const handleInput = (e: Event) => {
    const value = (e.target as HTMLInputElement).value;
    if (props.type === "number") {
      props.onChange(Number(value) as never);
    } else {
      props.onChange(value as never);
    }
  };

  return (
    <label class="flex flex-col gap-1">
      <span class="text-xs text-secondary">{props.label}</span>
      <input
        type={props.type}
        class="w-full px-2 py-1.5 border rounded-md bg-element text-sm  transition-all"
        classList={{
          "border-danger ": props.errors ? props.errors.length > 0 : false,
          "border-default": !props.errors || props.errors.length === 0,
        }}
        onInput={handleInput}
        placeholder={props.placeholder}
        value={props.defaultValue}
      />
      <Show when={props.errors}>
        <For each={props.errors}>{(error) => <span class="text-xs text-danger">{error?.toString()}</span>}</For>
      </Show>
    </label>
  );
};

export default Input;


----- components/Tabs.tsx -----


----- components/Container.tsx -----
import type { ParentComponent } from "solid-js";

const Container: ParentComponent = (props) => {
  return <div class="pt-10px px-4 w-full h-full">{props.children}</div>;
};

export default Container;


----- components/StatBox.tsx -----
import { type Component, Show } from "solid-js";
// import { Platform } from "@tauri-apps/plugin-os";

const StatBox: Component<{
  title: string;
  value: number;
  last?: number;
}> = (props) => {
  const percentageChange = (current: number, last?: number) => {
    if (!last) return 0;
    return (((current - last) / last) * 100).toFixed(2);
  };

  return (
    <div class="p-2.5 rounded-lg border bg-element border-default h-25 w-full relative overflow-hidden">
      <div class="absolute top-0 right-0 w-14 h-8 rounded-lg bg-green-500/30 blur-md" />
      <div class="flex flex-col justify-between items-stretch w-full h-full">
        <div class="flex flex-row justify-between items-start">
          <p class="text-xs font-medium">{props.title}</p>
          <div class="text-green-600 text-sm">{percentageChange(props.value, props.last)}%</div>
        </div>
        <div class="flex flex-col justify-between text-secondary gap-1">
          <p class="text-xl font-medium text-primary">{props.value}</p>
          <Show when={props.last}>
            <p class="text-xs font-normal">${props.last} Previous period</p>
          </Show>
        </div>
      </div>
    </div>
  );
};

export default StatBox;


----- components/PageHeader/index.tsx -----
import { type Component, For, Show, type JSX } from "solid-js";
import { useNavigate } from "@solidjs/router";
import { FiChevronLeft, FiChevronRight } from "solid-icons/fi";

interface PageHeaderProps {
  title: string[];
  actionElements?: JSX.Element[];
}

const PageHeader: Component<PageHeaderProps> = (props) => {
  const navigate = useNavigate();

  return (
    <div class="flex fixed top-0 left-0 flex-row w-screen h-[40px] z-9999">
      <div
        class="flex items-center justify-end w-1/5 h-full lg:max-w-[220px] min-w-[200px] shrink-0 px-2.5 lg:px-4 text-primary"
        data-tauri-drag-region
      />
      <div
        class="flex justify-between items-center px-3 w-4/5 h-full border-b lg:px-6 lg:w-full border-black/20  backdrop-blur-lg bg-[#E3E3E3]/80 dark:bg-[#262626]/80 z-5"
        data-tauri-drag-region
      >
        <div class="flex flex-row h-full">
          <div class="flex items-center justify-center  gap-3 text-sm font-semibold mr-5" data-tauri-drag-region>
            <button
              class="rounded hover:bg-fills-opaque-4 bg-transparent transition-all p-1 flex items-center justify-center text-primary"
              type="button"
              onClick={() => navigate(-1)}
            >
              <FiChevronLeft class="w-5 h-5 " />
            </button>

            <button
              class="rounded hover:bg-fills-opaque-4 bg-transparent transition-all p-1 flex items-center justify-center text-primary"
              type="button"
              onClick={() => navigate(1)}
            >
              <FiChevronRight class="w-5 h-5" />
            </button>
          </div>
          <div class="flex gap-1 items-center h-full text-sm font-semibold" data-tauri-drag-region>
            <For each={props.title}>
              {(item, index) => (
                <Show
                  when={index() === props.title.length - 1}
                  fallback={
                    <>
                      <span class="text-secondary" data-tauri-drag-region>
                        {item}
                      </span>
                      <span class="text-secondary" data-tauri-drag-region>
                        /
                      </span>
                    </>
                  }
                >
                  <span class="text-primary" data-tauri-drag-region>
                    {item}
                  </span>
                </Show>
              )}
            </For>
          </div>
        </div>
        <div class="flex flex-row gap-4 items-center py-1.5 h-full text-primary">
          {props.actionElements?.reverse().map((item) => item)}
        </div>
      </div>
    </div>
  );
};

export default PageHeader;


----- components/PageHeader/HeaderButton.tsx -----
import type { ParentComponent } from "solid-js";

const HeaderButton: ParentComponent<{ buttonType?: "primary" | "secondary"; onClick?: (e: MouseEvent) => void }> = ({
  buttonType = "secondary",
  onClick,
  children,
}) => {
  return (
    <button
      type="button"
      classList={{
        "bg-black text-white dark:(bg-white text-black)": buttonType === "primary",
        "bg-secondary": buttonType === "secondary",
        "rounded h-full px-5 flex items-center justify-center text-sm text-primary": true,
      }}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default HeaderButton;


----- components/Table/index.tsx -----
import { createSignal, onMount, For, type Component, type JSX } from "solid-js";
import Pagination from "./Pagination";
import TableHead from "./TableHeader";
import TableRow from "./Row";

export interface Indicies {
  skip: number;
  take: number;
}

export interface RowAction<T> {
  onClick: (item: T) => void;
  icon?: Component;
}

interface TableProps<T extends Record<string, unknown>> {
  columns: Array<{ field: keyof T; header: string; component?: (item: T) => JSX.Element }>;
  rowActions?: Array<RowAction<T>>;
  loadPage: (indices: Indicies) => Promise<T[]>;
  totalItems: number;
  allowedCounts?: number[];
}

const Table = <T extends Record<string, unknown>>(props: TableProps<T>) => {
  const [data, setData] = createSignal<T[]>([]);

  const loadData = async (indices: { skip: number; take: number }) => {
    const newData = await props.loadPage(indices);
    setData(newData);
  };

  onMount(async () => {
    await loadData({ skip: 0, take: props.allowedCounts?.[0] || 10 });
  });

  return (
    <div class="flex h-full flex-col justify-between">
      <table class="min-w-full leading-normal">
        <TableHead columns={props.columns} hasActions={!!props.rowActions} />
        <tbody class="overflow-y-auto">
          <For each={data()}>
            {(item) => (
              <TableRow
                item={item}
                columns={props.columns}
                rowActions={props.rowActions?.map((action) => ({
                  ...action,
                  onClick: () => action.onClick(item),
                }))}
              />
            )}
          </For>
        </tbody>
      </table>
      <Pagination allowedCounts={props.allowedCounts} itemCount={props.totalItems} onIndexChange={loadData} />
    </div>
  );
};

export default Table;


----- components/Table/Pagination.tsx -----
import { useI18n } from "@/i18n";
import { SegmentedControl } from "@/shared/components/SegmentedControl";
import { FiChevronLeft, FiChevronRight } from "solid-icons/fi";
import { createSignal } from "solid-js";
import type { Indicies } from ".";

interface PaginationProps {
  itemCount: number;
  allowedCounts?: number[];
  onIndexChange: (indices: Indicies) => void;
}

const Pagination = (props: PaginationProps) => {
  const [pageNo, setPageNo] = createSignal(1);
  const [count, setCount] = createSignal(props.allowedCounts?.[0] || 10);
  const [t] = useI18n();

  const maxPages = () => Math.ceil(props.itemCount / count());

  const filteredCounts = () => {
    return props.allowedCounts || [10, 20, 50, -1];
  };

  const setPageNoHandler = (value: number) => {
    value = Number.parseInt(String(value));
    if (Number.isNaN(value)) {
      return;
    }

    setPageNo(Math.min(Math.max(1, value), maxPages()));
    emitIndices();
  };

  const setCountHandler = (c: number) => {
    setPageNo(1);
    if (c === -1) {
      c = props.itemCount;
    }
    setCount(c);
    emitIndices();
  };

  const emitIndices = () => {
    const indices = getSliceIndices();
    props.onIndexChange(indices);
  };

  const getSliceIndices = () => {
    const skip = (pageNo() - 1) * count();
    const take = count();
    return { skip, take };
  };

  return (
    <div class="grid grid-cols-3 text-primary text-sm select-none items-center" style="height: 50px">
      {/* Length Display */}
      <div class="justify-self-start">
        {`${(pageNo() - 1) * count() + 1} - ${Math.min(pageNo() * count(), props.itemCount)}`}
      </div>

      {/* Pagination Selector */}
      <div class="flex gap-2 items-center justify-self-center">
        <FiChevronLeft
          class={`w-4 h-4 rtl-rotate-180 ${pageNo() > 1 ? "text-primary cursor-pointer" : "text-transparent"}`}
          onClick={() => setPageNoHandler(Math.max(1, pageNo() - 1))}
        />
        <div class="flex gap-2 bg-secondary rounded h-22px">
          <input
            type="number"
            class="w-8 text-end outline-none bg-transparent "
            value={pageNo()}
            min="1"
            max={maxPages()}
            onChange={(e) => setPageNoHandler(e.target.valueAsNumber)}
            onInput={(e) => setPageNoHandler(e.target.valueAsNumber)}
          />
          <p>/</p>
          <p class="w-8 flex items-center">{maxPages()}</p>
        </div>
        <FiChevronRight
          class={`w-4 h-4 rtl-rotate-180 ${pageNo() < maxPages() ? "text-primary cursor-pointer" : "text-transparent"}`}
          onClick={() => setPageNoHandler(Math.min(maxPages(), pageNo() + 1))}
        />
      </div>

      {/* Count Selector */}
      <div class="justify-self-end">
        <SegmentedControl
          options={filteredCounts().map((c) => ({
            id: String(c),
            label: c === -1 ? t("table.all") : String(c),
          }))}
          onChange={(value) => setCountHandler(Number(value))}
        />
      </div>
    </div>
  );
};

export default Pagination;


----- components/Table/TableHeader.tsx -----
import { For } from "solid-js";

interface TableHeadProps<T> {
  columns: Array<{ field: keyof T; header: string }>;
  hasActions: boolean;
}

const TableHead = <T,>(props: TableHeadProps<T>) => {
  return (
    <thead>
      <tr class="text-left bg-[#fff] dark:bg-#353536 shadow-menu-border">
        <For each={props.columns}>
          {(column, index) => (
            <th
              class={`px-3 py-1 text-primary text-sm tracking-wider  ${index() === 0 ? "rounded-l-lg" : ""} ${
                index() === props.columns.length - 1 && !props.hasActions ? "rounded-r-lg " : ""
              }`}
            >
              {column.header}
            </th>
          )}
        </For>
        {props.hasActions && <th class="px-3 py-1 text-primary text-sm tracking-wider rounded-r-lg">Actions</th>}
      </tr>
    </thead>
  );
};

export default TableHead;


----- components/Table/ActionButton.tsx -----
import type { Component } from "solid-js";
import { Dynamic } from "solid-js/web";

interface ActionButtonProps {
  onClick: () => void;
  icon?: Component;
}

const ActionButton: Component<ActionButtonProps> = (props) => {
  return (
    <button type="button" class="text-default w-5 h-5 bg-red/0" onClick={props.onClick}>
      <Dynamic component={props.icon} />
    </button>
  );
};

export default ActionButton;


----- components/Table/Row.tsx -----
import { For, type JSX, Show } from "solid-js";
import ActionButton from "./ActionButton";
import type { RowAction } from ".";

interface TableRowProps<T> {
  item: T;
  columns: Array<{ field: keyof T; header: string; component?: (item: T) => JSX.Element }>;
  rowActions?: Array<RowAction<T>>;
}
const TableRow = <T,>(props: TableRowProps<T>) => {
  return (
    <tr class="border-b border-default">
      <For each={props.columns}>
        {(column) => <td class="px-3 py-2">{column.component?.(props.item) ?? String(props.item[column.field])}</td>}
      </For>
      <Show when={props.rowActions}>
        <td class="px-3 py-2 flex flex-row gap-2 items-center">
          <For each={props.rowActions}>
            {(action) => <ActionButton onClick={() => action.onClick(props.item)} icon={action.icon} />}
          </For>
        </td>
      </Show>
    </tr>
  );
};

export default TableRow;


----- components/Box.tsx -----
import type { ParentComponent } from "solid-js";

const Box: ParentComponent<{ class?: string }> = (props) => {
  return (
    <div class={`rounded-lg border p-3 bg-element border-default h-full w-full ${props.class}`}>{props.children}</div>
  );
};

export default Box;


----- components/StatusIcon.tsx -----
import type { ParentComponent } from "solid-js";

const StatusIcon: ParentComponent = (props) => {
  return <div class="bg-red rounded border-black border-1 w-20 ">{props.children}</div>;
};

export default StatusIcon;


----- pages/index.tsx -----
import type { Component } from "solid-js";
import { onMount } from "solid-js";
import Box from "../components/Box";
import StatBox from "../components/StatBox";
import { useI18n } from "@/i18n";
import PageHeader from "../components/PageHeader";
import Container from "../components/Container";
import {
  Chart,
  LineController,
  CategoryScale,
  PointElement,
  LineElement,
  LinearScale,
  Title,
  Tooltip,
  Legend,
  BarController,
  BarElement,
  ArcElement,
  PieController,
} from "chart.js";
import { Line, Bar, Pie } from "solid-chartjs";

const Overview: Component = () => {
  const [t] = useI18n();

  onMount(() => {
    Chart.register(
      LineController,
      CategoryScale,
      PointElement,
      LineElement,
      LinearScale,
      Title,
      Tooltip,
      Legend,
      BarController,
      BarElement,
      ArcElement,
      PieController,
    );
  });

  const lineChartData = {
    labels: ["January", "February", "March", "April", "May"],
    datasets: [
      {
        label: "Sales",
        data: [50, 60, 70, 80, 90],
        fill: false,
        borderColor: "rgb(75, 192, 192)",
        tension: 0.1,
      },
    ],
  };

  const lineChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: "Sales Chart",
      },
    },
  };

  const pieChartData = {
    labels: ["Red", "Blue", "Yellow"],
    datasets: [
      {
        data: [30, 50, 20],
        backgroundColor: ["rgb(255, 99, 132)", "rgb(54, 162, 235)", "rgb(255, 205, 86)"],
        hoverOffset: 4,
      },
    ],
  };

  const pieChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: "Pie Chart",
      },
    },
  };

  const barChartData = {
    labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
    datasets: [
      {
        label: "# of Votes",
        data: [12, 19, 3, 5, 2, 3],
        backgroundColor: [
          "rgba(255, 99, 132, 0.2)",
          "rgba(54, 162, 235, 0.2)",
          "rgba(255, 206, 86, 0.2)",
          "rgba(75, 192, 192, 0.2)",
          "rgba(153, 102, 255, 0.2)",
          "rgba(255, 159, 64, 0.2)",
        ],
        borderColor: [
          "rgba(255, 99, 132, 1)",
          "rgba(54, 162, 235, 1)",
          "rgba(255, 206, 86, 1)",
          "rgba(75, 192, 192, 1)",
          "rgba(153, 102, 255, 1)",
          "rgba(255, 159, 64, 1)",
        ],
        borderWidth: 1,
      },
    ],
  };

  const barChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: "Bar Chart",
      },
    },
  };

  return (
    <Container>
      <PageHeader title={[t("sidebar.button.overview")]} />
      <div class="grid grid-cols-2 grid-rows-5 gap-3 lg:(gap-4 grid-cols-3) w-full h-screen">
        <div class="col-span-2">
          <div class="flex flex-row gap-3 lg:gap-4 justify-between items-center w-full h-full">
            <StatBox title={t("overview.stats.purchase")} value={1654.43} last={6804.52} />
            <StatBox title={t("overview.stats.sales")} value={100} />
            <StatBox title={t("overview.stats.tax")} value={120} />
          </div>
        </div>
        <div class="col-span-2 row-span-2 row-start-2">
          <Box>
            <Line data={lineChartData} options={lineChartOptions} width={500} height={300} />
          </Box>
        </div>
        <div class="hidden lg:(block col-span-1)">
          <Box>
            <div class="flex flex-row">info</div>
          </Box>
        </div>
        <div class="col-span-2 row-start-4">
          <Box>
            <Bar data={barChartData} options={barChartOptions} width={500} height={300} />
          </Box>
        </div>
        <div class="lg:(col-start-3 row-span-2 block) hidden">
          <Box>
            <Pie data={pieChartData} options={pieChartOptions} width={500} height={300} />
          </Box>
        </div>
      </div>
    </Container>
  );
};

export default Overview;


----- pages/Settings/index.tsx -----
import { type Component, createSignal } from "solid-js";
import Toolbar from "./components/Toolbar";
import { FiFileText, FiSettings } from "solid-icons/fi";
import { useI18n } from "@/i18n";
import Input from "@/shared/components/Menu/Input";
import Dropdown from "@/shared/components/Menu/Dropdown";
import PageHeader from "../../components/PageHeader";
import HeaderButton from "../../components/PageHeader/HeaderButton";

const Settings: Component = () => {
  const [t] = useI18n();
  const [currentSection, setCurrentSection] = createSignal(0);

  return (
    <>
      <PageHeader
        title={[t("sidebar.button.settings")]}
        actionElements={[
          <HeaderButton buttonType="primary" onClick={() => console.log("clicked")}>
            Save
          </HeaderButton>,
        ]}
      />
      <div class="w-full h-20 gap-2 flex justify-center items-center border-b border-black/20">
        <Toolbar
          text={t("settings.general.title")}
          icon={<FiSettings />}
          active={currentSection() === 0}
          onClick={() => setCurrentSection(0)}
        />
        <Toolbar
          text={t("settings.invoice.title")}
          icon={<FiFileText />}
          active={currentSection() === 1}
          onClick={() => setCurrentSection(1)}
        />
        <Toolbar
          text="Nastavení"
          icon={<FiSettings />}
          active={currentSection() === 2}
          onClick={() => setCurrentSection(2)}
        />
        <Toolbar text="Nastavení" icon={<FiSettings />} />
        <Toolbar text="Nastavení" icon={<FiSettings />} />
        <Toolbar text="Nastavení" icon={<FiSettings />} />
      </div>
      <div class="w-full h-full px-20">
        <Input label="Název" id="name" placeholder="Název" />
        <Dropdown />
      </div>
    </>
  );
};

export default Settings;


----- pages/Settings/components/Toolbar.tsx -----
import { Component, JSX } from "solid-js";

const Toolbar: Component<{
  text: string;
  icon?: JSX.Element;
  active?: boolean;
  onClick?: () => void;
}> = (props) => {
  return (
    <div
      class="p-2 hover:bg-gray-100/5 rounded-lg flex flex-col gap-1 items-center font-medium transition cursor-pointer text-sm"
      classList={{ "bg-gray-100/5": props.active }}
      onClick={props.onClick}
    >
      {props.icon}
      {props.text}
    </div>
  );
};

export default Toolbar;


----- pages/Sales/Invoices/index.tsx -----
import { DocumentType, getDocuments, type GetDocumentData } from "@/bindings";
import { useI18n } from "@/i18n";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { FiDownload, FiEdit, FiPlus, FiTrash } from "solid-icons/fi";
import { type Component, createSignal } from "solid-js";
import Popover from "@/shared/components/Popover";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import Container from "@/screens/Dashboard/components/Container";
import { useNavigate } from "@solidjs/router";

const Invoices: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();
  const [invoicePopover, setInvoicePopover] = createSignal(false);

  const handleEdit = (item: GetDocumentData) => {
    navigate(`${item.id}`);
  };

  const handleDelete = (item: GetDocumentData) => {
    console.log("Delete:", item);
    // Handle delete action
  };
  const handleDownload = (item: GetDocumentData) => {
    // Handle download action
    window.print();
  };

  const fetchInvoices = async (indices: Indicies) => {
    return await getDocuments(DocumentType.INVOICE, indices);
  };

  const rowActions = [
    {
      label: "Download",
      onClick: handleDownload,
      icon: FiDownload,
    },
    {
      label: "Edit",
      onClick: handleEdit,
      icon: FiEdit,
    },
    {
      label: "Delete",
      onClick: handleDelete,
      icon: FiTrash,
    },
  ];

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.sales"), t("sidebar.button.invoices")]}
        actionElements={[
          <HeaderButton onClick={() => navigate("new")} buttonType="primary">
            <FiPlus class="stroke-2" />
          </HeaderButton>,
        ]}
      />
      <Table
        columns={[{ field: "id", header: "ID" }]}
        totalItems={15}
        loadPage={fetchInvoices}
        rowActions={rowActions}
      />
      <Popover show={invoicePopover()} onClose={() => setInvoicePopover(false)} title="Create Invoice">
        <div>cuspoic</div>
      </Popover>
    </Container>
  );
};

export default Invoices;


----- pages/Sales/Invoices/ManageInvoice.tsx -----
import { useI18n } from "@/i18n";
import Container from "@/screens/Dashboard/components/Container";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import { useNavigate, useParams } from "@solidjs/router";
import { For, Show, onMount, type Component } from "solid-js";
import { createForm } from "@tanstack/solid-form";
import Input from "@/screens/Dashboard/components/Form/Input";
import Dropdown from "@/screens/Dashboard/components/Form/Dropdown";
import { createDocument, deleteDocument, getDocument, updateDocument, type Document } from "@/bindings";
import Form from "@/screens/Dashboard/components/Form";
import Section from "@/screens/Dashboard/components/Form/Section";
import toast from "solid-toast";
import { FiTrash } from "solid-icons/fi";

const ManageInvoice: Component = () => {
  const params = useParams<{ readonly id?: string }>();
  const [t] = useI18n();
  const navigate = useNavigate();
  const form = createForm<Document>(() => ({
    defaultValues: {
      id: 0,
      number: "",
      clientId: 0,
      templateId: "",
      currency: "",
      issueDate: new Date(),
      taxDate: new Date(),
      dueDate: new Date(),
      status: "DRAFT",
      items: [],
    },
    onSubmit: async (invoice) => {
      console.log(invoice.value);
      try {
        if (invoice.value.id > 0) {
          await updateDocument(invoice.value);
          toast.success("Invoice updated");
        } else {
          await createDocument(invoice.value);
          toast.success("Invoice saved");
        }
        navigate("/dashboard/sales/invoices");
      } catch (e) {
        toast.error("Failed to save invoice");
        console.error(e);
      }
    },
  }));

  onMount(async () => {
    if (params.id) {
      const invoice = await getDocument(Number.parseInt(params.id));
      form.update({ ...form.options, defaultValues: invoice });
      console.log(form.state.values);
    }
  });

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.sales"), t("sidebar.button.invoices"), params.id ? params.id : t("pageHeaader.new")]}
        actionElements={[
          <HeaderButton onClick={() => form.handleSubmit()} buttonType="primary">
            Save
          </HeaderButton>,
          <Show when={params.id}>
            <HeaderButton
              onClick={async () => {
                try {
                  await deleteDocument(Number.parseInt(params.id as string));
                  toast.success("Invoice deleted");
                  navigate("/dashboard/sales/invoices");
                } catch (e) {
                  toast.error(e as string);
                }
              }}
              buttonType="secondary"
            >
              <FiTrash />
            </HeaderButton>
          </Show>,
        ]}
      />
      <Form form={form}>
        <Section title="Invoice Information">
          <form.Field name="number">
            {(field) => (
              <Input
                type="text"
                label="Number"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="clientId">
            {(field) => (
              <Dropdown
                label="Client"
                data={[
                  { label: "Alice", id: 1 },
                  { label: "Bob", id: 2 },
                  { label: "Carol", id: 3 },
                ]}
                onSelect={(data) => field().handleChange(data.id as number)}
              />
            )}
          </form.Field>
          <form.Field name="templateId">
            {(field) => (
              <Input
                type="text"
                label="Template ID"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="currency">
            {(field) => (
              <Input
                type="text"
                label="Currency"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="issueDate">
            {(field) => (
              <Input
                type="date"
                label="Issue Date"
                defaultValue={field().state.value.toISOString().split("T")[0]}
                onChange={(data) => field().handleChange(new Date(data))}
              />
            )}
          </form.Field>
          <form.Field name="taxDate">
            {(field) => (
              <Input
                type="date"
                label="Tax Date"
                defaultValue={field().state.value.toISOString().split("T")[0]}
                onChange={(data) => field().handleChange(new Date(data))}
              />
            )}
          </form.Field>
          <form.Field name="dueDate">
            {(field) => (
              <Input
                type="date"
                label="Due Date"
                defaultValue={field().state.value.toISOString().split("T")[0]}
                onChange={(data) => field().handleChange(new Date(data))}
              />
            )}
          </form.Field>
          <form.Field name="status">
            {(field) => (
              <Dropdown
                defaultValueId={field().state.value}
                label="Status"
                data={[
                  { id: "DRAFT", label: "Draft" },
                  { id: "SENT", label: "Sent" },
                  { id: "PAID", label: "Paid" },
                  { id: "CANCELLED", label: "Cancelled" },
                  { id: "OVERDUE", label: "Overdue" },
                ]}
                onSelect={(data) =>
                  field().handleChange(data.id as "DRAFT" | "SENT" | "PAID" | "CANCELLED" | "OVERDUE")
                }
              />
            )}
          </form.Field>
        </Section>
        <Section title="Invoice Items">
          <form.Field name="items">
            {(field) => (
              <div>
                <Show when={field().state.value.length > 0}>
                  <For each={field().state.value}>
                    {(item, i) => (
                      <div>
                        <form.Field name={`items[${i()}].description`}>
                          {(subField) => (
                            <Input
                              type="text"
                              label={`Description for item ${i() + 1}`}
                              defaultValue={subField().state.value}
                              onChange={(data) => subField().handleChange(data)}
                            />
                          )}
                        </form.Field>
                        <form.Field name={`items[${i()}].quantity`}>
                          {(subField) => (
                            <Input
                              type="number"
                              label={`Quantity for item ${i() + 1}`}
                              defaultValue={subField().state.value}
                              onChange={(data) => subField().handleChange(Number(data))}
                            />
                          )}
                        </form.Field>
                        <form.Field name={`items[${i()}].price`}>
                          {(subField) => (
                            <Input
                              type="number"
                              label={`Price for item ${i() + 1}`}
                              defaultValue={subField().state.value}
                              onChange={(data) => subField().handleChange(Number(data))}
                            />
                          )}
                        </form.Field>
                        <form.Field name={`items[${i()}].tax`}>
                          {(subField) => (
                            <Input
                              type="number"
                              label={`Tax for item ${i() + 1}`}
                              defaultValue={subField().state.value}
                              onChange={(data) => subField().handleChange(Number(data))}
                            />
                          )}
                        </form.Field>
                      </div>
                    )}
                  </For>
                </Show>

                <button
                  onClick={() => field().pushValue({ id: 0, description: "", quantity: 0, price: 0, tax: 0 })}
                  type="button"
                >
                  Add item
                </button>
              </div>
            )}
          </form.Field>
        </Section>
      </Form>
    </Container>
  );
};

export default ManageInvoice;


----- pages/Sales/Schedules/index.tsx -----
import { useI18n } from "@/i18n";
import Container from "@/screens/Dashboard/components/Container";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { useSelector } from "@/store";
import { FiActivity, FiTrash } from "solid-icons/fi";
import { type Component, createSignal } from "solid-js";

const Invoices: Component = () => {
  const company = useSelector((state) => state.companyService.company);
  const [t] = useI18n();
  const [invoices, setInvoices] = createSignal([]);

  // const fetchInvoices = async () => {
  //   console.log(company);
  //   const data = await getInvoices(company.id);
  //   console.log(data);
  //   // setInvoices(data);
  // };
  // fetchInvoices();

  const loadPage = async (indicies: Indicies) => {
    // Simulating an API call to fetch data for the specified page
    const startIndex = indicies.skip;
    const endIndex = startIndex + indicies.take;
    const data = books.slice(startIndex, endIndex);
    return data;
  };

  const columns = [
    { field: "id", header: "ID" },
    { field: "title", header: "Title" },
    { field: "author", header: "Author" },
    { field: "year", header: "Year" },
  ];

  interface Book {
    id: number;
    title: string;
    author: string;
    year: number;
    [key: string]: unknown;
  }

  const books: Book[] = [
    { id: 1, title: "To Kill a Mockingbird", author: "Harper Lee", year: 1960 },
    { id: 2, title: "1984", author: "George Orwell", year: 1949 },
    { id: 3, title: "Pride and Prejudice", author: "Jane Austen", year: 1813 },
    { id: 4, title: "The Great Gatsby", author: "F. Scott Fitzgerald", year: 1925 },
    { id: 5, title: "One Hundred Years of Solitude", author: "Gabriel García Márquez", year: 1967 },
    {
      id: 6,
      title: "The Lord of the Rings",
      author: "J.R.R. Tolkien",
      year: 1954,
      genre: "Fantasy",
      language: "English",
      pages: 1178,
    },
    {
      id: 7,
      title: "Harry Potter and the Sorcerer's Stone",
      author: "J.K. Rowling",
      year: 1997,
      genre: "Fantasy",
      language: "English",
      pages: 309,
    },
    {
      id: 8,
      title: "The Hobbit",
      author: "J.R.R. Tolkien",
      year: 1937,
      genre: "Fantasy",
      language: "English",
      pages: 310,
    },
    {
      id: 9,
      title: "The Catcher in the Rye",
      author: "J.D. Salinger",
      year: 1951,
      genre: "Fiction",
      language: "English",
      pages: 277,
    },
    {
      id: 10,
      title: "The Alchemist",
      author: "Paulo Coelho",
      year: 1988,
      genre: "Fiction",
      language: "Portuguese",
      pages: 197,
    },
    {
      id: 11,
      title: "The Little Prince",
      author: "Antoine de Saint-Exupéry",
      year: 1943,
      genre: "Novella",
      language: "French",
      pages: 93,
    },
    {
      id: 12,
      title: "The Book Thief",
      author: "Markus Zusak",
      year: 2005,
      genre: "Historical Fiction",
      language: "English",
      pages: 552,
    },
    {
      id: 13,
      title: "The Kite Runner",
      author: "Khaled Hosseini",
      year: 2003,
      genre: "Fiction",
      language: "English",
      pages: 371,
    },
    {
      id: 14,
      title: "The Hunger Games",
      author: "Suzanne Collins",
      year: 2008,
      genre: "Science Fiction",
      language: "English",
      pages: 374,
    },
    {
      id: 15,
      title: "The Giver",
      author: "Lois Lowry",
      year: 1993,
      genre: "Dystopian Fiction",
      language: "English",
      pages: 179,
    },
  ];

  const handleEdit = (item: Book) => {
    console.log("Edit:", item);
    // Handle edit action
  };

  const handleDelete = (item: Book) => {
    console.log("Delete:", item);
    // Handle delete action
  };

  const rowActions = [
    {
      label: "Edit",
      onClick: handleEdit,
      icon: FiActivity,
    },
    {
      label: "Delete",
      onClick: handleDelete,
      icon: FiTrash,
    },
  ];

  return (
    <Container>
      <PageHeader title={[t("sidebar.section.sales"), t("sidebar.button.schedules")]} />
      {/* <Table
        columns={columns}
        totalItems={books.length}
        loadPage={loadPage}
        rowActions={rowActions}
        extraContent={
          <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Create New</button>
        }
      /> */}

      {/* <table class="w-full ">
        <tbody>
          <TableHeader>
            <td class="">ID</td>
            <td>Castka</td>
            <td>Ahoj,</td>
          </TableHeader>
          <Row>
            <td>
              <Badge color="danger">Cuspic</Badge>{" "}
            </td>
            <td>Centro </td>
            <td>Centro </td>
          </Row>
          <Row>
            <td>Centro </td>
            <td>Centro </td>
            <td>Centro </td>
          </Row>
        </tbody>
      </table> */}
    </Container>
  );
};

export default Invoices;


----- pages/Sales/Templates/index.tsx -----
import { useI18n } from "@/i18n";
import Container from "@/screens/Dashboard/components/Container";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import Dropdown from "@/shared/components/Menu/Dropdown";
import { getInitializedPrintWindow } from "@/utils/savePDF";
import type { Component } from "solid-js";

const Invoices: Component = () => {
  const [t] = useI18n();

  return (
    <Container>
      <PageHeader title={[t("sidebar.section.sales"), t("sidebar.button.templates")]} />

      <button
        type="button"
        onClick={() => getInitializedPrintWindow(10, 10)}
        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
      >
        cus
      </button>

      <Dropdown />

      {/* <table class="w-full ">
        <tbody>
          <TableHeader>
            <td class="">ID</td>
            <td>Castka</td>
            <td>Ahoj,</td>
          </TableHeader>
          <Row>
            <td>
              <Badge color="danger">Cuspic</Badge>{" "}
            </td>
            <td>Centro </td>
            <td>Centro </td>
          </Row>
          <Row>
            <td>Centro </td>
            <td>Centro </td>
            <td>Centro </td>
          </Row>
        </tbody>
      </table> */}
    </Container>
  );
};

export default Invoices;


----- pages/Other/Clients/index.tsx -----
import { type GetClientData, getClients } from "@/bindings";
import { useI18n } from "@/i18n";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { FiEdit, FiPlus } from "solid-icons/fi";
import type { Component } from "solid-js";
import { useNavigate } from "@solidjs/router";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import Container from "@/screens/Dashboard/components/Container";

const Clients: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();

  const loadPage = async (indices: Indicies) => {
    return await getClients(indices);
  };

  const handleEdit = (item: GetClientData) => {
    navigate(`detail/${item.id}`);
  };

  const rowActions = [
    {
      label: "Edit",
      onClick: handleEdit,
      icon: FiEdit,
    },
  ];

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.other"), t("sidebar.button.clients")]}
        actionElements={[
          <HeaderButton onClick={() => navigate("new")} buttonType="primary">
            <FiPlus class="stroke-2" />
          </HeaderButton>,
        ]}
      />
      <Table
        columns={[
          { field: "id", header: "ID" },
          { field: "name", header: "Name" },
          { field: "email", header: "Email" },
          { field: "phone", header: "Phone" },
        ]}
        totalItems={10}
        loadPage={loadPage}
        rowActions={rowActions}
      />
    </Container>
  );
};

export default Clients;


----- pages/Other/Clients/ManageClient.tsx -----
import { useI18n } from "@/i18n";
import Container from "@/screens/Dashboard/components/Container";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import { useNavigate, useParams } from "@solidjs/router";
import { For, Show, onMount, type Component } from "solid-js";
import { createForm } from "@tanstack/solid-form";
import Input from "@/screens/Dashboard/components/Form/Input";
import Dropdown from "@/screens/Dashboard/components/Form/Dropdown";
import { type Client, createClient, deleteClient, getClient, updateClient } from "@/bindings";
import Form from "@/screens/Dashboard/components/Form";
import { zodValidator } from "@tanstack/zod-form-adapter";
import { z } from "zod";
import Section from "@/screens/Dashboard/components/Form/Section";
import toast from "solid-toast";
import { FiTrash } from "solid-icons/fi";

const schema = z.object({
  id: z.number(),
  name: z.string().min(20),
  clientType: z.enum(["BOTH", "SUPPLIER", "CUSTOMER"]),
  email: z.string().optional(),
  cin: z.string(),
  vatId: z.string(),
  address: z.string(),
  city: z.string(),
  zip: z.string(),
  phone: z.string(),
});

const ManageClient: Component = () => {
  const params = useParams<{ readonly id?: string }>();
  const [t] = useI18n();
  const navigate = useNavigate();
  const form = createForm(() => ({
    defaultValues: {
      id: 0,
      name: "",
      clientType: "BOTH",
      email: "",
      cin: "",
      vatId: "",
      address: "",
      city: "",
      zip: "",
      phone: "",
    } as Client,
    validatorAdapter: zodValidator,
    validators: {
      onSubmit: schema,
    },
    onSubmitInvalid: (e) => {
      console.log("invalid", e.formApi.state.errors);
    },
    onSubmit: async (client) => {
      console.log(client.value);
      try {
        if (client.value.id > 0) {
          await updateClient(client.value);
          toast.success("Client updated");
        } else {
          await createClient(client.value);
          toast.success("Client saved");
        }
        navigate("/dashboard/other/clients");
      } catch (e) {
        toast.error("Failed to save client");
        console.error(e);
      }
    },
  }));

  onMount(async () => {
    if (params.id) {
      const client = await getClient(Number.parseInt(params.id));
      form.update({ ...form.options, defaultValues: client });
      console.log(form.state.values);
    }
  });

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.sales"), t("sidebar.button.clients"), params.id ? params.id : t("pageHeaader.new")]}
        actionElements={[
          <HeaderButton onClick={() => form.handleSubmit()} buttonType="primary">
            Save
          </HeaderButton>,
          <Show when={params.id}>
            <HeaderButton
              onClick={async () => {
                try {
                  await deleteClient(Number.parseInt(params.id as string));
                  toast.success("Client deleted");
                  navigate("/dashboard/other/clients");
                } catch (e) {
                  toast.error(e as string);
                }
              }}
              buttonType="secondary"
            >
              <FiTrash />
            </HeaderButton>
          </Show>,
        ]}
      />
      <Form form={form}>
        <Section title="Client Information">
          <form.Field name="name" validators={{ onChange: z.string().min(20), onChangeAsyncDebounceMs: 500 }}>
            {(field) => (
              <Input
                type="text"
                label="Name"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
                errors={field().state.meta.touchedErrors}
              />
            )}
          </form.Field>
          <form.Field
            name="email"
            validators={{
              onChange: z.string().email().optional(),
              onChangeAsyncDebounceMs: 500,
            }}
          >
            {(field) => (
              <Input
                type="email"
                label="Email"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
                errors={field().state.meta.touchedErrors}
              />
            )}
          </form.Field>
          <form.Field name="clientType">
            {(field) => (
              <Dropdown
                defaultValueId={field().state.value}
                label="Client Type"
                data={[
                  { id: "BOTH", label: "Both" },
                  { id: "SUPPLIER", label: "Supplier" },
                  { id: "CUSTOMER", label: "Customer" },
                ]}
                onSelect={(data) => field().handleChange(data.id as "BOTH" | "SUPPLIER" | "CUSTOMER")}
              />
            )}
          </form.Field>
          <form.Field name="cin">
            {(field) => (
              <Input
                type="text"
                label="CIN"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="vatId">
            {(field) => (
              <Input
                type="text"
                label="VAT ID"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
        </Section>
        <Section title="Adress">
          <form.Field name="address">
            {(field) => (
              <Input
                type="text"
                label="Street Address"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="city">
            {(field) => (
              <Input
                type="text"
                label="City"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="zip">
            {(field) => (
              <Input
                type="text"
                label="Postal Code"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
          <form.Field name="phone">
            {(field) => (
              <Input
                type="tel"
                label="Phone Number"
                defaultValue={field().state.value}
                onChange={(data) => field().handleChange(data)}
              />
            )}
          </form.Field>
        </Section>
      </Form>
    </Container>
  );
};

export default ManageClient;


----- pages/Other/Clients/ClientDetail.tsx -----
import { useI18n } from "@/i18n";
import Box from "@/screens/Dashboard/components/Box";
import Container from "@/screens/Dashboard/components/Container";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import StatBox from "@/screens/Dashboard/components/StatBox";
import Table from "@/screens/Dashboard/components/Table";
import { useNavigate, useParams } from "@solidjs/router";
import type { Component } from "solid-js";

const ClientDetail: Component = () => {
  const params = useParams<{ readonly id: string }>();
  const navigate = useNavigate();
  const [t] = useI18n();

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.sales"), t("sidebar.button.clients"), params.id]}
        actionElements={[
          <HeaderButton onClick={() => navigate(`/dashboard/other/clients/${params.id}`)} buttonType="primary">
            Edit
          </HeaderButton>,
        ]}
      />
      <div class="flex flex-row gap-3 lg:gap-4 justify-between items-center w-full ">
        <StatBox title={t("overview.stats.purchase")} value={1654.43} last={6804.52} />
        <StatBox title={t("overview.stats.sales")} value={100} />
        <StatBox title={t("overview.stats.tax")} value={120} />
      </div>
      <div class="grid grid-cols-6 h-full mt-4 gap-4">
        <div class="bg-red col-span-4">
          <Table
            columns={[
              { field: "id", header: "ID" },
              { field: "name", header: "Name" },
            ]}
            totalItems={10}
            loadPage={() => {}}
          />
        </div>
        <Box class="col-span-2">ddd</Box>
      </div>
    </Container>
  );
};

export default ClientDetail;


----- pages/Other/Reports.tsx -----
import type { Component } from "solid-js";
import Container from "../../components/Container";

const Invoices: Component = () => {
  return (
    <Container>
      <div class="flex flex-col items-center justify-center h-screen w-full">
        <h1 class="text-4xl font-bold text-red">reports</h1>
      </div>
    </Container>
  );
};

export default Invoices;


----- pages/Other/Templates/index.tsx -----
import { type Template, getTemplates, templateCount } from "@/bindings";
import { useI18n } from "@/i18n";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { FiEdit, FiPlus } from "solid-icons/fi";
import { createSignal, onMount, type Component } from "solid-js";
import { useNavigate } from "@solidjs/router";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import Container from "@/screens/Dashboard/components/Container";
import StatusIcon from "@/screens/Dashboard/components/StatusIcon";

const Templates: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();
  const [count, setCount] = createSignal(10);

  const loadPage = async (indices: Indicies) => {
    const data = await getTemplates(indices);
    return data;
  };

  const handleEdit = (item: Template) => {
    navigate(`${item.id}`);
  };

  const getCount = async () => {
    const data = await templateCount();
    setCount(data);
  };

  onMount(getCount);

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.other"), t("sidebar.button.templates")]}
        actionElements={[
          <HeaderButton onClick={() => navigate("new")} buttonType="primary">
            <FiPlus class="stroke-2" />
          </HeaderButton>,
        ]}
      />
      <Table
        columns={[
          { field: "id", header: "ID" },
          { field: "name", header: "Name" },
          {
            field: "templateType",
            header: "Type",
            component: (item) => <StatusIcon>{item.templateType}</StatusIcon>,
          },
        ]}
        totalItems={count()}
        loadPage={loadPage}
        rowActions={[
          {
            onClick: handleEdit,
            icon: FiEdit,
          },
        ]}
      />
    </Container>
  );
};

export default Templates;


----- pages/Other/Templates/ManageTemplate.tsx -----
import TemplateRenderer from "@/shared/components/PdfRenderer";
import { Hr } from "@/shared/components/Menu/Hr";
import { type Accessor, type Setter, createEffect, createSignal, on, onMount, type Component, Show } from "solid-js";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import { useI18n } from "@/i18n";
import { useNavigate, useParams } from "@solidjs/router";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import { createCodeMirror, createEditorControlledValue } from "solid-codemirror";
import { highlightActiveLineGutter, lineNumbers } from "@codemirror/view";
import type { Extension } from "@codemirror/state";
import { liquid } from "@codemirror/lang-liquid";
import { material } from "@uiw/codemirror-theme-material";
import Popover from "@/shared/components/Popover";
import { createTemplate, deleteTemplate, getTemplate, updateTemplate } from "@/bindings";
import { FiSettings, FiTrash } from "solid-icons/fi";
import toast from "solid-toast";

const ManageTemplate: Component = () => {
  const params = useParams<{ readonly id?: string }>();
  const navigate = useNavigate();
  const [t] = useI18n();
  const [showRender, setShowRender] = createSignal(false);
  const [showSettings, setShowSettings] = createSignal(false);

  const [templateCode, setTemplateCode] = createSignal(`
  {% assign people = "alice, bob, carol" | split: ", " -%}

  <ul>
  {%- for person in people %}
    <li>
      <a href="{{person | prepend: "http://example.com/"}}">
        {{ person | capitalize }}
      </a>
    </li>
  {%- endfor%}
  </ul>
  
`);

  onMount(async () => {
    if (params.id) {
      const data = await getTemplate(Number(params.id));
      setTemplateCode(data.html);
    }
  });

  return (
    <>
      <PageHeader
        title={[
          t("sidebar.section.other"),
          t("sidebar.button.templates"),
          params.id ? params.id : t("pageHeaader.new"),
        ]}
        actionElements={[
          <HeaderButton
            onClick={async () => {
              if (params.id) {
                try {
                  await updateTemplate(Number(params.id), templateCode());
                  toast.success("Template updated"); // TODO: i18n
                  navigate("/dashboard/other/templates");
                } catch (e) {
                  toast.error(e as string);
                }
              } else {
                try {
                  await createTemplate({ templateType: "INVOICE", html: templateCode(), name: "Cus" });
                  toast.success("Template created"); // TODO: i18n
                  navigate("/dashboard/other/templates");
                } catch (e) {
                  toast.error(e as string);
                }
              }
            }}
            buttonType="primary"
          >
            Save
          </HeaderButton>,
          <HeaderButton onClick={() => setShowRender(!showRender())} buttonType="secondary">
            {showRender() ? "Edit" : "Preview"}
          </HeaderButton>,
          <HeaderButton buttonType="secondary" onClick={() => setShowSettings(!showSettings())}>
            <FiSettings />
          </HeaderButton>,
          <Show when={params.id}>
            <HeaderButton
              buttonType="secondary"
              onClick={async () => {
                try {
                  await deleteTemplate(Number(params.id));
                  toast.success("Template deleted"); // TODO: i18n
                  navigate("/dashboard/other/templates");
                } catch (e) {
                  toast.error(e as string);
                }
              }}
            >
              <FiTrash />
            </HeaderButton>
          </Show>,
        ]}
      />

      <div class="relative h-full">
        <Editor code={templateCode} onValueChange={setTemplateCode} />
        <Show when={showSettings()}>
          <div class="absolute top-0 left-0 w-full  h-full grid grid-cols-6 grid-rows-1 justify-between z-999">
            <div class="bg-black bg-opacity-20 w-full col-span-4" onClick={() => setShowSettings(false)} />
            <div class="bg-red col-span-2">dada</div>
          </div>
        </Show>
      </div>

      <Popover show={showRender()} onClose={() => setShowRender(false)} title="cus">
        <div class="w-full lg:w-1/2 bg-red rounded-xl gap-4 flex flex-col p-4">
          <h1 class="text-xl font-bold">Preview</h1>
          <Hr />
          <TemplateRenderer template={templateCode()} data={{ email: "joe@aa.cz", phone: "12122212" }} />
        </div>
      </Popover>
    </>
  );
};

export default ManageTemplate;

const Editor: Component<{ onValueChange: Setter<string>; code: Accessor<string> }> = (props) => {
  const {
    editorView,
    ref: editorRef,
    createExtension,
  } = createCodeMirror({
    /**
     * The initial value of the editor
     */
    value: props.code(),
    /**
     * Fired whenever the editor code value changes.
     */
    onValueChange: (value) => {
      props.onValueChange(value);
    },
  });
  const extensions = (): Extension => {
    return [lineNumbers(), highlightActiveLineGutter(), liquid(), material];
  };

  createEditorControlledValue(editorView, props.code);

  createEffect(on(extensions, (extensions) => reconfigure(extensions)));

  const reconfigure = createExtension(extensions());
  return (
    <div
      class="h-full w-full"
      ref={(el) => {
        onMount(() => {
          editorRef(el);
        });
      }}
    />
  );
};


----- pages/Purchase/Expenses/index.tsx -----
import { type GetClientData, getClients } from "@/bindings";
import { useI18n } from "@/i18n";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { FiEdit, FiPlus } from "solid-icons/fi";
import type { Component } from "solid-js";
import { useNavigate } from "@solidjs/router";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import Container from "@/screens/Dashboard/components/Container";

const Expenses: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();

  const loadPage = async (indices: Indicies) => {
    return await getClients(indices);
  };

  const handleEdit = (item: GetClientData) => {
    navigate(`detail/${item.id}`);
  };

  const rowActions = [
    {
      label: "Edit",
      onClick: handleEdit,
      icon: FiEdit,
    },
  ];

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.purchase"), t("sidebar.button.expenses")]}
        actionElements={[
          <HeaderButton onClick={() => navigate("new")} buttonType="primary">
            <FiPlus class="stroke-2" />
          </HeaderButton>,
        ]}
      />
      <Table
        columns={[
          { field: "id", header: "ID" },
          { field: "name", header: "Name" },
          { field: "email", header: "Email" },
          { field: "phone", header: "Phone" },
        ]}
        totalItems={10}
        loadPage={loadPage}
        rowActions={rowActions}
      />
    </Container>
  );
};

export default Expenses;


----- pages/Purchase/ReceivedInvoices/index.tsx -----
import { getDocuments, DocumentType, type GetDocumentData } from "@/bindings";
import { useI18n } from "@/i18n";
import Table, { type Indicies } from "@/screens/Dashboard/components/Table";
import { FiEdit, FiPlus } from "solid-icons/fi";
import type { Component } from "solid-js";
import { useNavigate } from "@solidjs/router";
import PageHeader from "@/screens/Dashboard/components/PageHeader";
import HeaderButton from "@/screens/Dashboard/components/PageHeader/HeaderButton";
import Container from "@/screens/Dashboard/components/Container";

const Expenses: Component = () => {
  const [t] = useI18n();
  const navigate = useNavigate();

  const loadPage = async (indices: Indicies) => {
    return await getDocuments(DocumentType.RECIEVE, indices);
  };

  const handleEdit = (item: GetDocumentData) => {
    navigate(`detail/${item.id}`);
  };

  const rowActions = [
    {
      label: "Edit",
      onClick: handleEdit,
      icon: FiEdit,
    },
  ];

  return (
    <Container>
      <PageHeader
        title={[t("sidebar.section.purchase"), t("sidebar.button.recievedInvoices")]}
        actionElements={[
          <HeaderButton onClick={() => navigate("new")} buttonType="primary">
            <FiPlus class="stroke-2" />
          </HeaderButton>,
        ]}
      />
      <Table
        columns={[
          { field: "number", header: "Number" },
          { field: "status", header: "Status" },
        ]}
        totalItems={10}
        loadPage={loadPage}
        rowActions={rowActions}
      />
    </Container>
  );
};

export default Expenses;


